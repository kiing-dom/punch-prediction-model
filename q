warning: in the working copy of 'notebooks/1.0-classification-model.ipynb', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/notebooks/1.0-classification-model.ipynb b/notebooks/1.0-classification-model.ipynb[m
[1mindex b8e15d5..c27724e 100644[m
[1m--- a/notebooks/1.0-classification-model.ipynb[m
[1m+++ b/notebooks/1.0-classification-model.ipynb[m
[36m@@ -646,13 +646,7 @@[m
       "max          158.207112             89.088774            82.811459  \n",[m
       "\n",[m
       "[8 rows x 30 columns]\n",[m
[31m-      "File: cleaned_boxing_data_no-punches_20241002_193049.csv\n"[m
[31m-     ][m
[31m-    },[m
[31m-    {[m
[31m-     "name": "stdout",[m
[31m-     "output_type": "stream",[m
[31m-     "text": [[m
[32m+[m[32m      "File: cleaned_boxing_data_no-punches_20241002_193049.csv\n",[m
       "<class 'pandas.core.frame.DataFrame'>\n",[m
       "RangeIndex: 6244 entries, 0 to 6243\n",[m
       "Data columns (total 39 columns):\n",[m
[36m@@ -742,7 +736,13 @@[m
       "3            56.219671  \n",[m
       "4            57.457246  \n",[m
       "\n",[m
[31m-      "[5 rows x 39 columns]\n",[m
[32m+[m[32m      "[5 rows x 39 columns]\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
       "             frame    timestamp  left_shoulder_x  left_shoulder_y  \\\n",[m
       "count  6244.000000  6244.000000      6244.000000      6244.000000   \n",[m
       "mean   3675.150705    61.255682         0.537693         0.547534   \n",[m
[36m@@ -1173,7 +1173,7 @@[m
   },[m
   {[m
    "cell_type": "markdown",[m
[31m-   "id": "4d3315ff",[m
[32m+[m[32m   "id": "bfa67d09",[m
    "metadata": {},[m
    "source": [[m
     "## Model Training And Evaluation"[m
[36m@@ -1182,7 +1182,7 @@[m
   {[m
    "cell_type": "code",[m
    "execution_count": 7,[m
[31m-   "id": "c785d7a9",[m
[32m+[m[32m   "id": "d94e41bf",[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -1199,7 +1199,7 @@[m
     "    for name, model in models.items():\n",[m
     "        \n",[m
     "        # train the model\n",[m
[31m-    "        print(f\"Training with {name}...\")\n",[m
[32m+[m[32m    "        print(f\"Training with {name} algorithm...\")\n",[m
     "        model.fit(X_train, y_train)\n",[m
     "        \n",[m
     "        #make predictions\n",[m
[36m@@ -1230,7 +1230,7 @@[m
   },[m
   {[m
    "cell_type": "markdown",[m
[31m-   "id": "ad220770",[m
[32m+[m[32m   "id": "a75209d8",[m
    "metadata": {},[m
    "source": [[m
     "## Feature Importance"[m
[36m@@ -1239,7 +1239,7 @@[m
   {[m
    "cell_type": "code",[m
    "execution_count": 8,[m
[31m-   "id": "698bb103",[m
[32m+[m[32m   "id": "52db9b39",[m
    "metadata": {},[m
    "outputs": [],[m
    "source": [[m
[36m@@ -1247,7 +1247,7 @@[m
     "    feature_importance = pd.DataFrame({\n",[m
     "        'feature': feature_names,\n",[m
     "        'importance': model.feature_importances_\n",[m
[31m-    "    }).sort_values(importance, ascending=False)\n",[m
[32m+[m[32m    "    }).sort_values('importance', ascending=False)\n",[m
     "    \n",[m
     "    plt.figure(figsize=(12, 8))\n",[m
     "    sns.barplot(x='importance', y='feature', data = feature_importance.head(top_n))\n",[m
[36m@@ -1257,7 +1257,7 @@[m
   },[m
   {[m
    "cell_type": "markdown",[m
[31m-   "id": "e2f22900",[m
[32m+[m[32m   "id": "380211cf",[m
    "metadata": {},[m
    "source": [[m
     "## Main Model Script"[m
[36m@@ -1266,41 +1266,114 @@[m
   {[m
    "cell_type": "code",[m
    "execution_count": 9,[m
[31m-   "id": "8c3d29bf",[m
[31m-   "metadata": {},[m
[32m+[m[32m   "id": "902ae5e7",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "scrolled": false[m
[32m+[m[32m   },[m
    "outputs": [[m
     {[m
      "name": "stdout",[m
      "output_type": "stream",[m
      "text": [[m
[31m-      "Training Random Forest...\n"[m
[32m+[m[32m      "Training with Random Forest algorithm...\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Results for Random Forest:\n",[m
[32m+[m[32m      "Accuracy: 0.9936\n",[m
[32m+[m[32m      "Cross Validation scores: [0.98740665 0.9847686  0.98799063 0.98667252 0.98403632]\n",[m
[32m+[m[32m      "Average CV score: 0.9862\n",[m
[32m+[m[32m      "Classification Report:\n",[m
[32m+[m[32m      "                precision    recall  f1-score   support\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "         cross       1.00      1.00      1.00      1242\n",[m
[32m+[m[32m      "           jab       0.99      1.00      1.00      1172\n",[m
[32m+[m[32m      "     left-hook       1.00      0.99      0.99      1270\n",[m
[32m+[m[32m      " left-uppercut       0.99      1.00      1.00      1189\n",[m
[32m+[m[32m      "    no-punches       0.99      0.98      0.99      1226\n",[m
[32m+[m[32m      "    right-hook       1.00      0.99      1.00      1255\n",[m
[32m+[m[32m      "right-uppercut       0.98      0.99      0.99      1182\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "      accuracy                           0.99      8536\n",[m
[32m+[m[32m      "     macro avg       0.99      0.99      0.99      8536\n",[m
[32m+[m[32m      "  weighted avg       0.99      0.99      0.99      8536\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Training with Gradient Boosting algorithm...\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Results for Gradient Boosting:\n",[m
[32m+[m[32m      "Accuracy: 0.9249\n",[m
[32m+[m[32m      "Cross Validation scores: [0.92766144 0.92428237 0.92633275 0.92633275 0.92296426]\n",[m
[32m+[m[32m      "Average CV score: 0.9255\n",[m
[32m+[m[32m      "Classification Report:\n",[m
[32m+[m[32m      "                precision    recall  f1-score   support\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "         cross       0.93      0.90      0.91      1242\n",[m
[32m+[m[32m      "           jab       0.94      0.96      0.95      1172\n",[m
[32m+[m[32m      "     left-hook       0.91      0.93      0.92      1270\n",[m
[32m+[m[32m      " left-uppercut       0.97      0.98      0.97      1189\n",[m
[32m+[m[32m      "    no-punches       0.91      0.85      0.88      1226\n",[m
[32m+[m[32m      "    right-hook       0.96      0.96      0.96      1255\n",[m
[32m+[m[32m      "right-uppercut       0.85      0.90      0.88      1182\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "      accuracy                           0.92      8536\n",[m
[32m+[m[32m      "     macro avg       0.93      0.93      0.92      8536\n",[m
[32m+[m[32m      "  weighted avg       0.93      0.92      0.92      8536\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Training with SVM algorithm...\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Results for SVM:\n",[m
[32m+[m[32m      "Accuracy: 0.9468\n",[m
[32m+[m[32m      "Cross Validation scores: [0.9415727  0.93702402 0.93922086 0.93922086 0.93673111]\n",[m
[32m+[m[32m      "Average CV score: 0.9388\n",[m
[32m+[m[32m      "Classification Report:\n",[m
[32m+[m[32m      "                precision    recall  f1-score   support\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "         cross       0.93      0.96      0.94      1242\n",[m
[32m+[m[32m      "           jab       0.95      0.96      0.95      1172\n",[m
[32m+[m[32m      "     left-hook       0.97      0.94      0.95      1270\n",[m
[32m+[m[32m      " left-uppercut       0.97      0.99      0.98      1189\n",[m
[32m+[m[32m      "    no-punches       0.92      0.90      0.91      1226\n",[m
[32m+[m[32m      "    right-hook       0.99      0.97      0.98      1255\n",[m
[32m+[m[32m      "right-uppercut       0.89      0.92      0.91      1182\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "      accuracy                           0.95      8536\n",[m
[32m+[m[32m      "     macro avg       0.95      0.95      0.95      8536\n",[m
[32m+[m[32m      "  weighted avg       0.95      0.95      0.95      8536\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Training with KNN algorithm...\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Results for KNN:\n",[m
[32m+[m[32m      "Accuracy: 0.9925\n",[m
[32m+[m[32m      "Cross Validation scores: [0.98228145 0.98198594 0.98169303 0.98008202 0.98052138]\n",[m
[32m+[m[32m      "Average CV score: 0.9813\n",[m
[32m+[m[32m      "Classification Report:\n",[m
[32m+[m[32m      "                precision    recall  f1-score   support\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "         cross       0.99      0.99      0.99      1242\n",[m
[32m+[m[32m      "           jab       0.99      1.00      0.99      1172\n",[m
[32m+[m[32m      "     left-hook       1.00      0.99      0.99      1270\n",[m
[32m+[m[32m      " left-uppercut       0.99      1.00      1.00      1189\n",[m
[32m+[m[32m      "    no-punches       1.00      0.98      0.99      1226\n",[m
[32m+[m[32m      "    right-hook       1.00      0.99      0.99      1255\n",[m
[32m+[m[32m      "right-uppercut       0.98      1.00      0.99      1182\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "      accuracy                           0.99      8536\n",[m
[32m+[m[32m      "     macro avg       0.99      0.99      0.99      8536\n",[m
[32m+[m[32m      "  weighted avg       0.99      0.99      0.99      8536\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Best model: Random Forest\n",[m
[32m+[m[32m      "Best model saved as ../models/best_punch_prediction_model.joblib\n",[m
[32m+[m[32m      "Feature scaler saved as ../models/feature_scaler.joblib\n"[m
      ][m
     },[m
     {[m
[31m-     "ename": "KeyboardInterrupt",[m
[31m-     "evalue": "",[m
[31m-     "output_type": "error",[m
[31m-     "traceback": [[m
[31m-      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",[m
[31m-      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",[m
[31m-      "Cell \u001b[1;32mIn[9], line 7\u001b[0m\n\u001b[0;32m      4\u001b[0m X_train_scaled, X_test_scaled, y_train, y_test, scaler \u001b[38;5;241m=\u001b[39m prepare_data(dfs)\n\u001b[0;32m      6\u001b[0m \u001b[38;5;66;03m# Train and Evaluate the Models\u001b[39;00m\n\u001b[1;32m----> 7\u001b[0m results \u001b[38;5;241m=\u001b[39m train_and_evaluate_models(X_train_scaled, X_test_scaled, y_train, y_test)\n\u001b[0;32m      9\u001b[0m \u001b[38;5;66;03m# Select the best model\u001b[39;00m\n\u001b[0;32m     10\u001b[0m best_model_name \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mmax\u001b[39m(results, key\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mlambda\u001b[39;00m x: results[x][\u001b[38;5;124m'\u001b[39m\u001b[38;5;124maccuracy\u001b[39m\u001b[38;5;124m'\u001b[39m])\n",[m
[31m-      "Cell \u001b[1;32mIn[7], line 15\u001b[0m, in \u001b[0;36mtrain_and_evaluate_models\u001b[1;34m(X_train, X_test, y_train, y_test)\u001b[0m\n\u001b[0;32m     11\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m name, model \u001b[38;5;129;01min\u001b[39;00m models\u001b[38;5;241m.\u001b[39mitems():\n\u001b[0;32m     12\u001b[0m     \n\u001b[0;32m     13\u001b[0m     \u001b[38;5;66;03m# train the model\u001b[39;00m\n\u001b[0;32m     14\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTraining \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mname\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m...\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m---> 15\u001b[0m     model\u001b[38;5;241m.\u001b[39mfit(X_train, y_train)\n\u001b[0;32m     17\u001b[0m     \u001b[38;5;66;03m#make predictions\u001b[39;00m\n\u001b[0;32m     18\u001b[0m     y_pred \u001b[38;5;241m=\u001b[39m model\u001b[38;5;241m.\u001b[39mpredict(X_test)\n",[m
[31m-      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:1151\u001b[0m, in \u001b[0;36m_fit_context.<locals>.decorator.<locals>.wrapper\u001b[1;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1144\u001b[0m     estimator\u001b[38;5;241m.\u001b[39m_validate_params()\n\u001b[0;32m   1146\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m config_context(\n\u001b[0;32m   1147\u001b[0m     skip_parameter_validation\u001b[38;5;241m=\u001b[39m(\n\u001b[0;32m   1148\u001b[0m         prefer_skip_nested_validation \u001b[38;5;129;01mor\u001b[39;00m global_skip_validation\n\u001b[0;32m   1149\u001b[0m     )\n\u001b[0;32m   1150\u001b[0m ):\n\u001b[1;32m-> 1151\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m fit_method(estimator, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",[m
[31m-      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\ensemble\\_forest.py:456\u001b[0m, in \u001b[0;36mBaseForest.fit\u001b[1;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[0;32m    445\u001b[0m trees \u001b[38;5;241m=\u001b[39m [\n\u001b[0;32m    446\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_make_estimator(append\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, random_state\u001b[38;5;241m=\u001b[39mrandom_state)\n\u001b[0;32m    447\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(n_more_estimators)\n\u001b[0;32m    448\u001b[0m ]\n\u001b[0;32m    450\u001b[0m \u001b[38;5;66;03m# Parallel loop: we prefer the threading backend as the Cython code\u001b[39;00m\n\u001b[0;32m    451\u001b[0m \u001b[38;5;66;03m# for fitting the trees is internally releasing the Python GIL\u001b[39;00m\n\u001b[0;32m    452\u001b[0m \u001b[38;5;66;03m# making threading more efficient than multiprocessing in\u001b[39;00m\n\u001b[0;32m    453\u001b[0m \u001b[38;5;66;03m# that case. However, for joblib 0.12+ we respect any\u001b[39;00m\n\u001b[0;32m    454\u001b[0m \u001b[38;5;66;03m# parallel_backend contexts set at a higher level,\u001b[39;00m\n\u001b[0;32m    455\u001b[0m \u001b[38;5;66;03m# since correctness does not rely on using threads.\u001b[39;00m\n\u001b[1;32m--> 456\u001b[0m trees \u001b[38;5;241m=\u001b[39m Parallel(\n\u001b[0;32m    457\u001b[0m     n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_jobs,\n\u001b[0;32m    458\u001b[0m     verbose\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mverbose,\n\u001b[0;32m    459\u001b[0m     prefer\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mthreads\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    460\u001b[0m )(\n\u001b[0;32m    461\u001b[0m     delayed(_parallel_build_trees)(\n\u001b[0;32m    462\u001b[0m         t,\n\u001b[0;32m    463\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbootstrap,\n\u001b[0;32m    464\u001b[0m         X,\n\u001b[0;32m    465\u001b[0m         y,\n\u001b[0;32m    466\u001b[0m         sample_weight,\n\u001b[0;32m    467\u001b[0m         i,\n\u001b[0;32m    468\u001b[0m         \u001b[38;5;28mlen\u001b[39m(trees),\n\u001b[0;32m    469\u001b[0m         verbose\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mverbose,\n\u001b[0;32m    470\u001b[0m         class_weight\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mclass_weight,\n\u001b[0;32m    471\u001b[0m         n_samples_bootstrap\u001b[38;5;241m=\u001b[39mn_samples_bootstrap,\n\u001b[0;32m    472\u001b[0m     )\n\u001b[0;32m    473\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m i, t \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(trees)\n\u001b[0;32m    474\u001b[0m )\n\u001b[0;32m    476\u001b[0m \u001b[38;5;66;03m# Collect newly grown trees\u001b[39;00m\n\u001b[0;32m    477\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mestimators_\u001b[38;5;241m.\u001b[39mextend(trees)\n",[m
[31m-      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\utils\\parallel.py:65\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[1;34m(self, iterable)\u001b[0m\n\u001b[0;32m     60\u001b[0m config \u001b[38;5;241m=\u001b[39m get_config()\n\u001b[0;32m     61\u001b[0m iterable_with_config \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m     62\u001b[0m     (_with_config(delayed_func, config), args, kwargs)\n\u001b[0;32m     63\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m delayed_func, args, kwargs \u001b[38;5;129;01min\u001b[39;00m iterable\n\u001b[0;32m     64\u001b[0m )\n\u001b[1;32m---> 65\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__call__\u001b[39m(iterable_with_config)\n",[m
[31m-      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\joblib\\parallel.py:1088\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[1;34m(self, iterable)\u001b[0m\n\u001b[0;32m   1085\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdispatch_one_batch(iterator):\n\u001b[0;32m   1086\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_iterating \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_original_iterator \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m-> 1088\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdispatch_one_batch(iterator):\n\u001b[0;32m   1089\u001b[0m     \u001b[38;5;28;01mpass\u001b[39;00m\n\u001b[0;32m   1091\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m pre_dispatch \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mall\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mor\u001b[39;00m n_jobs \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m   1092\u001b[0m     \u001b[38;5;66;03m# The iterable was consumed all at once by the above for loop.\u001b[39;00m\n\u001b[0;32m   1093\u001b[0m     \u001b[38;5;66;03m# No need to wait for async callbacks to trigger to\u001b[39;00m\n\u001b[0;32m   1094\u001b[0m     \u001b[38;5;66;03m# consumption.\u001b[39;00m\n",[m
[31m-      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\joblib\\parallel.py:901\u001b[0m, in \u001b[0;36mParallel.dispatch_one_batch\u001b[1;34m(self, iterator)\u001b[0m\n\u001b[0;32m    899\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m    900\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 901\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_dispatch(tasks)\n\u001b[0;32m    902\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mTrue\u001b[39;00m\n",[m
[31m-      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\joblib\\parallel.py:819\u001b[0m, in \u001b[0;36mParallel._dispatch\u001b[1;34m(self, batch)\u001b[0m\n\u001b[0;32m    817\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n\u001b[0;32m    818\u001b[0m     job_idx \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jobs)\n\u001b[1;32m--> 819\u001b[0m     job \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backend\u001b[38;5;241m.\u001b[39mapply_async(batch, callback\u001b[38;5;241m=\u001b[39mcb)\n\u001b[0;32m    820\u001b[0m     \u001b[38;5;66;03m# A job can complete so quickly than its callback is\u001b[39;00m\n\u001b[0;32m    821\u001b[0m     \u001b[38;5;66;03m# called before we get here, causing self._jobs to\u001b[39;00m\n\u001b[0;32m    822\u001b[0m     \u001b[38;5;66;03m# grow. To ensure correct results ordering, .insert is\u001b[39;00m\n\u001b[0;32m    823\u001b[0m     \u001b[38;5;66;03m# used (rather than .append) in the following line\u001b[39;00m\n\u001b[0;32m    824\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jobs\u001b[38;5;241m.\u001b[39minsert(job_idx, job)\n",[m
[31m-      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\joblib\\_parallel_backends.py:208\u001b[0m, in \u001b[0;36mSequentialBackend.apply_async\u001b[1;34m(self, func, callback)\u001b[0m\n\u001b[0;32m    206\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_async\u001b[39m(\u001b[38;5;28mself\u001b[39m, func, callback\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[0;32m    207\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Schedule a func to be run\"\"\"\u001b[39;00m\n\u001b[1;32m--> 208\u001b[0m     result \u001b[38;5;241m=\u001b[39m ImmediateResult(func)\n\u001b[0;32m    209\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m callback:\n\u001b[0;32m    210\u001b[0m         callback(result)\n",[m
[31m-      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\joblib\\_parallel_backends.py:597\u001b[0m, in \u001b[0;36mImmediateResult.__init__\u001b[1;34m(self, batch)\u001b[0m\n\u001b[0;32m    594\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__init__\u001b[39m(\u001b[38;5;28mself\u001b[39m, batch):\n\u001b[0;32m    595\u001b[0m     \u001b[38;5;66;03m# Don't delay the application, to avoid keeping the input\u001b[39;00m\n\u001b[0;32m    596\u001b[0m     \u001b[38;5;66;03m# arguments in memory\u001b[39;00m\n\u001b[1;32m--> 597\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mresults \u001b[38;5;241m=\u001b[39m batch()\n",[m
[31m-      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\joblib\\parallel.py:288\u001b[0m, in \u001b[0;36mBatchedCalls.__call__\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    284\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[0;32m    285\u001b[0m     \u001b[38;5;66;03m# Set the default nested backend to self._backend but do not set the\u001b[39;00m\n\u001b[0;32m    286\u001b[0m     \u001b[38;5;66;03m# change the default number of processes to -1\u001b[39;00m\n\u001b[0;32m    287\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m parallel_backend(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backend, n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_n_jobs):\n\u001b[1;32m--> 288\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m [func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    289\u001b[0m                 \u001b[38;5;28;01mfor\u001b[39;00m func, args, kwargs \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mitems]\n",[m
[31m-      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\joblib\\parallel.py:288\u001b[0m, in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m    284\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[0;32m    285\u001b[0m     \u001b[38;5;66;03m# Set the default nested backend to self._backend but do not set the\u001b[39;00m\n\u001b[0;32m    286\u001b[0m     \u001b[38;5;66;03m# change the default number of processes to -1\u001b[39;00m\n\u001b[0;32m    287\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m parallel_backend(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backend, n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_n_jobs):\n\u001b[1;32m--> 288\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m [func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    289\u001b[0m                 \u001b[38;5;28;01mfor\u001b[39;00m func, args, kwargs \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mitems]\n",[m
[31m-      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\utils\\parallel.py:127\u001b[0m, in \u001b[0;36m_FuncWrapper.__call__\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    125\u001b[0m     config \u001b[38;5;241m=\u001b[39m {}\n\u001b[0;32m    126\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m config_context(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mconfig):\n\u001b[1;32m--> 127\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfunction(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",[m
[31m-      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\ensemble\\_forest.py:171\u001b[0m, in \u001b[0;36m_parallel_build_trees\u001b[1;34m(tree, bootstrap, X, y, sample_weight, tree_idx, n_trees, verbose, class_weight, n_samples_bootstrap)\u001b[0m\n\u001b[0;32m    169\u001b[0m n_samples \u001b[38;5;241m=\u001b[39m X\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m0\u001b[39m]\n\u001b[0;32m    170\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m sample_weight \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m--> 171\u001b[0m     curr_sample_weight \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mones((n_samples,), dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mfloat64)\n\u001b[0;32m    172\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    173\u001b[0m     curr_sample_weight \u001b[38;5;241m=\u001b[39m sample_weight\u001b[38;5;241m.\u001b[39mcopy()\n",[m
[31m-      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\numpy\\core\\numeric.py:206\u001b[0m, in \u001b[0;36mones\u001b[1;34m(shape, dtype, order, like)\u001b[0m\n\u001b[0;32m    203\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m _ones_with_like(shape, dtype\u001b[38;5;241m=\u001b[39mdtype, order\u001b[38;5;241m=\u001b[39morder, like\u001b[38;5;241m=\u001b[39mlike)\n\u001b[0;32m    205\u001b[0m a \u001b[38;5;241m=\u001b[39m empty(shape, dtype, order)\n\u001b[1;32m--> 206\u001b[0m multiarray\u001b[38;5;241m.\u001b[39mcopyto(a, \u001b[38;5;241m1\u001b[39m, casting\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124munsafe\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m    207\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m a\n",[m
[31m-      "File \u001b[1;32m<__array_function__ internals>:200\u001b[0m, in \u001b[0;36mcopyto\u001b[1;34m(*args, **kwargs)\u001b[0m\n",[m
[31m-      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "[m
[31m-     ][m
[32m+[m[32m     "data": {[m
[32m+[m[32m      "image/png": "",[m
[32m+[m[32m      "text/plain": [[m
[32m+[m[32m       "<Figure size 1200x800 with 1 Axes>"[m
[32m+[m[32m      ][m
[32m+[m[32m     },[m
[32m+[m[32m     "metadata": {},[m
[32m+[m[32m     "output_type": "display_data"[m
     }[m
    ],[m
    "source": [[m
[36m@@ -1320,8 +1393,8 @@[m
     "\n",[m
     "# Plot feature importance for the best model, if it is tree based\n",[m
     "if hasattr(best_model, 'feature_importances_'):\n",[m
[31m-    "    feature_names = [col for col in dfs[list(dfs.keys())[0]].columns if col.endswidth(('_x', '_y', '_z', '_angle'))]\n",[m
[31m-    "    plot_feature_importances(best_model, feature_names)\n",[m
[32m+[m[32m    "    feature_names = [col for col in dfs[list(dfs.keys())[0]].columns if col.endswith(('_x', '_y', '_z', '_angle'))]\n",[m
[32m+[m[32m    "    plot_feature_importance(best_model, feature_names)\n",[m
     "    \n",[m
     "\n",[m
     "#Save the best model\n",[m
